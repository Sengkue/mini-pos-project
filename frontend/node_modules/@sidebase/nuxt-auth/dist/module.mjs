import { defineNuxtModule, useLogger, createResolver, addImports, addTypeTemplate, addTemplate, resolvePath, addRouteMiddleware, addPlugin, addServerPlugin } from '@nuxt/kit';
import { defu } from 'defu';
import { genInterface } from 'knitwork';
import { isProduction } from '../dist/runtime/helpers.js';

const topLevelDefaults = {
  isEnabled: true,
  baseURL: "/api/auth",
  disableInternalRouting: false,
  disableServerSideAuth: false,
  originEnvKey: "AUTH_ORIGIN",
  sessionRefresh: {
    enablePeriodically: false,
    enableOnWindowFocus: true,
    handler: void 0
  },
  globalAppMiddleware: {
    isEnabled: false,
    allow404WithoutAuth: true,
    addDefaultCallbackUrl: true
  }
};
const defaultsByBackend = {
  local: {
    type: "local",
    pages: {
      login: "/login"
    },
    endpoints: {
      signIn: { path: "/login", method: "post" },
      signOut: { path: "/logout", method: "post" },
      signUp: { path: "/register", method: "post" },
      getSession: { path: "/session", method: "get" }
    },
    token: {
      signInResponseTokenPointer: "/token",
      type: "Bearer",
      cookieName: "auth.token",
      headerName: "Authorization",
      maxAgeInSeconds: 30 * 60,
      // 30 minutes
      sameSiteAttribute: "lax",
      secureCookieAttribute: false,
      cookieDomain: "",
      httpOnlyCookieAttribute: false
    },
    session: {
      dataType: { id: "string | number" },
      dataResponsePointer: "/"
    },
    refresh: {
      isEnabled: false,
      endpoint: { path: "/refresh", method: "post" },
      refreshOnlyToken: true,
      token: {
        signInResponseRefreshTokenPointer: "/refreshToken",
        refreshResponseTokenPointer: "",
        refreshRequestTokenPointer: "/refreshToken",
        cookieName: "auth.refresh-token",
        maxAgeInSeconds: 60 * 60 * 24 * 7,
        // 7 days
        sameSiteAttribute: "lax",
        secureCookieAttribute: false,
        cookieDomain: "",
        httpOnlyCookieAttribute: false
      }
    }
  },
  authjs: {
    type: "authjs",
    trustHost: false,
    defaultProvider: "",
    // this satisfies Required and also gets caught at `!provider` check
    addDefaultCallbackUrl: true
  }
};
const PACKAGE_NAME = "sidebase-auth";
const module = defineNuxtModule({
  meta: {
    name: PACKAGE_NAME,
    configKey: "auth"
  },
  setup(userOptions, nuxt) {
    const logger = useLogger(PACKAGE_NAME);
    const selectedProvider = userOptions.provider?.type ?? "authjs";
    const options = defu({
      // We use `as` to infer backend types correctly for runtime-usage (everything is set, although for user everything was optional)
      provider: defu(
        userOptions.provider,
        defaultsByBackend[selectedProvider]
      )
    }, userOptions, topLevelDefaults);
    if (!options.isEnabled) {
      logger.info(`Skipping ${PACKAGE_NAME} setup, as module is disabled`);
      return;
    }
    logger.info("`nuxt-auth` setup starting");
    if (userOptions.disableInternalRouting === void 0 && selectedProvider === "local") {
      options.disableInternalRouting = true;
    }
    if (!isProduction) {
      const loggerMessages = [
        `Selected provider: ${selectedProvider}.`,
        `Auth API location is \`${options.baseURL}\`, if you would like to change this, see https://auth.sidebase.io/guide/application-side/configuration#baseurl.`
      ];
      if (selectedProvider === "authjs") {
        loggerMessages.push("Ensure that the `NuxtAuthHandler({ ... })` is there, see https://auth.sidebase.io/guide/authjs/nuxt-auth-handler");
      }
      logger.info(loggerMessages.join(" "));
    }
    nuxt.options.runtimeConfig = nuxt.options.runtimeConfig || { public: {} };
    nuxt.options.runtimeConfig.public.auth = options;
    const { resolve } = createResolver(import.meta.url);
    addImports([
      {
        name: "useAuth",
        from: resolve(`./runtime/composables/${options.provider.type}/useAuth`)
      },
      {
        name: "useAuthState",
        from: resolve(
          `./runtime/composables/${options.provider.type}/useAuthState`
        )
      }
    ]);
    nuxt.hook("nitro:config", (nitroConfig) => {
      nitroConfig.alias = nitroConfig.alias || {};
      nitroConfig.externals = defu(
        typeof nitroConfig.externals === "object" ? nitroConfig.externals : {},
        {
          inline: [resolve("./runtime")]
        }
      );
      nitroConfig.alias["#auth"] = resolve("./runtime/server/services");
    });
    addTypeTemplate({
      filename: "types/auth.d.ts",
      getContents: () => [
        "// AUTO-GENERATED BY @sidebase/nuxt-auth",
        "declare module '#auth' {",
        `  const { getServerSession, getToken, NuxtAuthHandler }: typeof import('${resolve("./runtime/server/services")}')`,
        ...options.provider.type === "local" ? [genInterface(
          "SessionData",
          options.provider.session.dataType
        )] : [],
        "}",
        ""
      ].join("\n")
    });
    addTypeTemplate({
      filename: "types/auth-misc.d.ts",
      getContents: () => [
        "// AUTO-GENERATED BY @sidebase/nuxt-auth",
        `import { RouteOptions } from '${resolve("./runtime/types.ts")}'`,
        "declare module 'nitropack' {",
        "  interface NitroRouteRules {",
        "    auth?: RouteOptions",
        "  }",
        "  interface NitroRouteConfig {",
        "    auth?: RouteOptions",
        "  }",
        "}",
        ""
      ].join("\n")
    });
    const generatedRefreshHandlerPath = addTemplate({
      filename: "./refreshHandler.ts",
      async getContents() {
        if (options.sessionRefresh.handler) {
          const path = (await resolvePath(options.sessionRefresh.handler)).replace(/\.ts$/, "");
          return `export { default as _refreshHandler } from '${path}'`;
        }
        return [
          `import { DefaultRefreshHandler } from '${resolve("./runtime/utils/refreshHandler")}'`,
          `export const _refreshHandler = new DefaultRefreshHandler(${JSON.stringify(options.sessionRefresh)})`
        ].join("\n");
      },
      write: true
    }).dst;
    addImports([{
      name: "_refreshHandler",
      from: generatedRefreshHandlerPath
    }]);
    addRouteMiddleware({
      name: "sidebase-auth",
      path: resolve("./runtime/middleware/sidebase-auth")
    });
    addPlugin(resolve("./runtime/plugin"));
    if (selectedProvider === "authjs") {
      addServerPlugin(resolve("./runtime/server/plugins/assertOrigin"));
    }
    if (options.provider.type === "local" && options.provider.refresh.isEnabled && !options.disableServerSideAuth) {
      addPlugin(resolve("./runtime/plugins/refresh-token.server"));
    }
    logger.success("`nuxt-auth` setup done");
  }
});

export { module as default };
